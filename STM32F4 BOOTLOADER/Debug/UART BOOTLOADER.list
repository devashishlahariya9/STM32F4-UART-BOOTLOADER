
UART BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002ca4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008163  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001892  00000000  00000000  000281e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  00029a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d2  00000000  00000000  0002a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001581d  00000000  00000000  0002a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000935a  00000000  00000000  0003ffe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085dba  00000000  00000000  00049341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001da0  00000000  00000000  000cf0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d0e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002c58 	.word	0x08002c58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002c58 	.word	0x08002c58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Bootloader_JumpToMainApp>:
BOOTLOADER_START_PACKET bsp = {0, 0};

typedef void (*ptrFapp)();

void Bootloader_JumpToMainApp(uint32_t _app_addr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t jump_addr;

	ptrFapp jump_app;

	jump_addr = *(uint32_t*)(_app_addr + 4);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3304      	adds	r3, #4
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	617b      	str	r3, [r7, #20]
	jump_app  = (ptrFapp)jump_addr;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]

	__set_MSP(*(uint32_t*)_app_addr);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f383 8808 	msr	MSP, r3
}
 80004f4:	bf00      	nop

	jump_app();
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4798      	blx	r3
}
 80004fa:	bf00      	nop
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <Bootloader_UpdateFirmware>:

void Bootloader_UpdateFirmware(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 800050a:	af00      	add	r7, sp, #0
	uint8_t resp = 0x01;
 800050c:	2301      	movs	r3, #1
 800050e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint32_t counter = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	uint8_t* bsp_ptr = (uint8_t*)&bsp;
 8000518:	4bb3      	ldr	r3, [pc, #716]	; (80007e8 <Bootloader_UpdateFirmware+0x2e4>)
 800051a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	uint8_t current_packet_buffer[BOOTLOADER_RECEPTION_BYTES_PER_PACKET];

	while(1)
	{
		counter++;
 800051e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000522:	3301      	adds	r3, #1
 8000524:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

		if(counter == BOOTLOADER_WAITING_TICKS)	return;
 8000528:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800052c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000530:	f000 8153 	beq.w	80007da <Bootloader_UpdateFirmware+0x2d6>

		else if(counter < BOOTLOADER_WAITING_TICKS && (USART1 -> SR & (1 << USART_SR_RXNE_Pos)))
 8000534:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800053c:	d210      	bcs.n	8000560 <Bootloader_UpdateFirmware+0x5c>
 800053e:	4bab      	ldr	r3, [pc, #684]	; (80007ec <Bootloader_UpdateFirmware+0x2e8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f003 0320 	and.w	r3, r3, #32
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00a      	beq.n	8000560 <Bootloader_UpdateFirmware+0x5c>
		{
			*bsp_ptr = USART1 -> DR;																	//Read The First Byte
 800054a:	4ba8      	ldr	r3, [pc, #672]	; (80007ec <Bootloader_UpdateFirmware+0x2e8>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000554:	701a      	strb	r2, [r3, #0]

			break;
 8000556:	bf00      	nop
		}
		HAL_Delay(1);
	}
	for(uint8_t i=1; i<sizeof(bsp); i++) HAL_UART_Receive(HUART, (bsp_ptr + i), 1, HAL_MAX_DELAY);		//Read Start Packet
 8000558:	2301      	movs	r3, #1
 800055a:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 800055e:	e013      	b.n	8000588 <Bootloader_UpdateFirmware+0x84>
		HAL_Delay(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fcc1 	bl	8000ee8 <HAL_Delay>
		counter++;
 8000566:	e7da      	b.n	800051e <Bootloader_UpdateFirmware+0x1a>
	for(uint8_t i=1; i<sizeof(bsp); i++) HAL_UART_Receive(HUART, (bsp_ptr + i), 1, HAL_MAX_DELAY);		//Read Start Packet
 8000568:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 800056c:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8000570:	18d1      	adds	r1, r2, r3
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	2201      	movs	r2, #1
 8000578:	489d      	ldr	r0, [pc, #628]	; (80007f0 <Bootloader_UpdateFirmware+0x2ec>)
 800057a:	f001 ffbc 	bl	80024f6 <HAL_UART_Receive>
 800057e:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8000582:	3301      	adds	r3, #1
 8000584:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8000588:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 800058c:	2b07      	cmp	r3, #7
 800058e:	d9eb      	bls.n	8000568 <Bootloader_UpdateFirmware+0x64>

	counter = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

	if(bsp.start_key == BOOTLOADER_RECEPTION_START_KEY)
 8000596:	4b94      	ldr	r3, [pc, #592]	; (80007e8 <Bootloader_UpdateFirmware+0x2e4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a96      	ldr	r2, [pc, #600]	; (80007f4 <Bootloader_UpdateFirmware+0x2f0>)
 800059c:	4293      	cmp	r3, r2
 800059e:	f040 811f 	bne.w	80007e0 <Bootloader_UpdateFirmware+0x2dc>
	{
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;
		uint32_t current_addr_offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

		HAL_FLASH_Unlock();
 80005a8:	f000 fdfc 	bl	80011a4 <HAL_FLASH_Unlock>

		EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80005ac:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80005b0:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Sector        = FLASH_SECTOR_1;
 80005b8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80005bc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80005c0:	2201      	movs	r2, #1
 80005c2:	609a      	str	r2, [r3, #8]
		EraseInitStruct.NbSectors     = 7;
 80005c4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80005c8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80005cc:	2207      	movs	r2, #7
 80005ce:	60da      	str	r2, [r3, #12]
		EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80005d0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80005d4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80005d8:	2202      	movs	r2, #2
 80005da:	611a      	str	r2, [r3, #16]

		HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff4f 	bl	8001488 <HAL_FLASHEx_Erase>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		HAL_FLASH_Lock();
 80005f0:	f000 fdfa 	bl	80011e8 <HAL_FLASH_Lock>

		if(status != HAL_OK) return;
 80005f4:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	f040 80f0 	bne.w	80007de <Bootloader_UpdateFirmware+0x2da>

		float total_packets = (float)bsp.nBytes / (float)BOOTLOADER_RECEPTION_BYTES_PER_PACKET;
 80005fe:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <Bootloader_UpdateFirmware+0x2e4>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	ee07 3a90 	vmov	s15, r3
 8000606:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800060a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80007f8 <Bootloader_UpdateFirmware+0x2f4>
 800060e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000612:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000616:	edc3 7a00 	vstr	s15, [r3]
		if((total_packets - (int)total_packets) > 0) total_packets++;
 800061a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800062e:	ed93 7a00 	vldr	s14, [r3]
 8000632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	dd0b      	ble.n	8000658 <Bootloader_UpdateFirmware+0x154>
 8000640:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800064c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000650:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000654:	edc3 7a00 	vstr	s15, [r3]

		int packets_received = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

		uint32_t nBytes = 0;
 800065e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000662:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
		uint8_t* nBytes_ptr = (uint8_t*)&nBytes;
 800066a:	463b      	mov	r3, r7
 800066c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

		while(packets_received != (int)total_packets)
 8000670:	e0a5      	b.n	80007be <Bootloader_UpdateFirmware+0x2ba>
		{
			HAL_UART_Transmit(HUART, (uint8_t*)&resp, 1, 2000);
 8000672:	f207 411f 	addw	r1, r7, #1055	; 0x41f
 8000676:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800067a:	2201      	movs	r2, #1
 800067c:	485c      	ldr	r0, [pc, #368]	; (80007f0 <Bootloader_UpdateFirmware+0x2ec>)
 800067e:	f001 fea8 	bl	80023d2 <HAL_UART_Transmit>

			for(int i=0; i<4; i++) HAL_UART_Receive(HUART, (nBytes_ptr + i), 1, 2000);	//Receive Packet Number of Bytes
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8000688:	e00f      	b.n	80006aa <Bootloader_UpdateFirmware+0x1a6>
 800068a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800068e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8000692:	18d1      	adds	r1, r2, r3
 8000694:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000698:	2201      	movs	r2, #1
 800069a:	4855      	ldr	r0, [pc, #340]	; (80007f0 <Bootloader_UpdateFirmware+0x2ec>)
 800069c:	f001 ff2b 	bl	80024f6 <HAL_UART_Receive>
 80006a0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80006a4:	3301      	adds	r3, #1
 80006a6:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80006aa:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	ddeb      	ble.n	800068a <Bootloader_UpdateFirmware+0x186>

			for(int i=0; i<nBytes; i++)														//Receive Packet Data
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80006b8:	e02f      	b.n	800071a <Bootloader_UpdateFirmware+0x216>
			{
				HAL_UART_Receive(HUART, &current_packet_buffer[i], 1, 2000);
 80006ba:	f107 021c 	add.w	r2, r7, #28
 80006be:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80006c2:	18d1      	adds	r1, r2, r3
 80006c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c8:	2201      	movs	r2, #1
 80006ca:	4849      	ldr	r0, [pc, #292]	; (80007f0 <Bootloader_UpdateFirmware+0x2ec>)
 80006cc:	f001 ff13 	bl	80024f6 <HAL_UART_Receive>

				counter++;
 80006d0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80006d4:	3301      	adds	r3, #1
 80006d6:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

				if((counter % 5) == 0)
 80006da:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <Bootloader_UpdateFirmware+0x2f8>)
 80006e0:	fba3 2301 	umull	r2, r3, r3, r1
 80006e4:	089a      	lsrs	r2, r3, #2
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	1aca      	subs	r2, r1, r3
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d10e      	bne.n	8000710 <Bootloader_UpdateFirmware+0x20c>
				{
					HAL_GPIO_WritePin(GPIOD, orange_led, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	4841      	ldr	r0, [pc, #260]	; (8000800 <Bootloader_UpdateFirmware+0x2fc>)
 80006fa:	f001 f96b 	bl	80019d4 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 80006fe:	2005      	movs	r0, #5
 8000700:	f000 fbf2 	bl	8000ee8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOD, orange_led, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	483d      	ldr	r0, [pc, #244]	; (8000800 <Bootloader_UpdateFirmware+0x2fc>)
 800070c:	f001 f962 	bl	80019d4 <HAL_GPIO_WritePin>
			for(int i=0; i<nBytes; i++)														//Receive Packet Data
 8000710:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000714:	3301      	adds	r3, #1
 8000716:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800071a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800071e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000722:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3c6      	bcc.n	80006ba <Bootloader_UpdateFirmware+0x1b6>
				}
			}
			packets_received++;
 800072c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000730:	3301      	adds	r3, #1
 8000732:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

			uint32_t address_base = (MAIN_APP_BASE_ADDR_FLASH + current_addr_offset);
 8000736:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800073a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800073e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000742:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

			HAL_FLASH_Unlock();
 8000746:	f000 fd2d 	bl	80011a4 <HAL_FLASH_Unlock>

			for(int i=0; i<nBytes; i++)						//Write Packet Data To FLASH
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8000750:	e01a      	b.n	8000788 <Bootloader_UpdateFirmware+0x284>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (address_base + i), current_packet_buffer[i]);
 8000752:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8000756:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800075a:	18d1      	adds	r1, r2, r3
 800075c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000760:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8000764:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2200      	movs	r2, #0
 8000770:	461c      	mov	r4, r3
 8000772:	4615      	mov	r5, r2
 8000774:	4622      	mov	r2, r4
 8000776:	462b      	mov	r3, r5
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcbf 	bl	80010fc <HAL_FLASH_Program>
			for(int i=0; i<nBytes; i++)						//Write Packet Data To FLASH
 800077e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8000782:	3301      	adds	r3, #1
 8000784:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8000788:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800078c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000790:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3db      	bcc.n	8000752 <Bootloader_UpdateFirmware+0x24e>
			}
			HAL_FLASH_Lock();
 800079a:	f000 fd25 	bl	80011e8 <HAL_FLASH_Lock>

			current_addr_offset += nBytes;
 800079e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80007a2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80007ac:	4413      	add	r3, r2
 80007ae:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			nBytes = 0;
 80007b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80007b6:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
		while(packets_received != (int)total_packets)
 80007be:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ca:	ee17 2a90 	vmov	r2, s15
 80007ce:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80007d2:	4293      	cmp	r3, r2
 80007d4:	f47f af4d 	bne.w	8000672 <Bootloader_UpdateFirmware+0x16e>
 80007d8:	e002      	b.n	80007e0 <Bootloader_UpdateFirmware+0x2dc>
		if(counter == BOOTLOADER_WAITING_TICKS)	return;
 80007da:	bf00      	nop
 80007dc:	e000      	b.n	80007e0 <Bootloader_UpdateFirmware+0x2dc>
		if(status != HAL_OK) return;
 80007de:	bf00      	nop
		}
	}
}
 80007e0:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bdb0      	pop	{r4, r5, r7, pc}
 80007e8:	2000006c 	.word	0x2000006c
 80007ec:	40011000 	.word	0x40011000
 80007f0:	20000028 	.word	0x20000028
 80007f4:	12345678 	.word	0x12345678
 80007f8:	44800000 	.word	0x44800000
 80007fc:	cccccccd 	.word	0xcccccccd
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fafc 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f80c 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f89e 	bl	8000950 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000814:	f000 f872 	bl	80008fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	Bootloader_UpdateFirmware();
 8000818:	f7ff fe74 	bl	8000504 <Bootloader_UpdateFirmware>

	Bootloader_JumpToMainApp(MAIN_APP_BASE_ADDR_FLASH);
 800081c:	4801      	ldr	r0, [pc, #4]	; (8000824 <main+0x20>)
 800081e:	f7ff fe59 	bl	80004d4 <Bootloader_JumpToMainApp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000822:	e7fe      	b.n	8000822 <main+0x1e>
 8000824:	08004000 	.word	0x08004000

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f9e2 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000898:	2308      	movs	r3, #8
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800089c:	23c0      	movs	r3, #192	; 0xc0
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f8ab 	bl	8001a08 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 f9a8 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2103      	movs	r1, #3
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fb0c 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e6:	f000 f991 	bl	8000c0c <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART1_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(HUART) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000934:	f001 fd00 	bl	8002338 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f965 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000028 	.word	0x20000028
 800094c:	40011000 	.word	0x40011000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4ba2      	ldr	r3, [pc, #648]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4aa1      	ldr	r2, [pc, #644]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b9f      	ldr	r3, [pc, #636]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b9b      	ldr	r3, [pc, #620]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a9a      	ldr	r2, [pc, #616]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b98      	ldr	r3, [pc, #608]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b94      	ldr	r3, [pc, #592]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a93      	ldr	r2, [pc, #588]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b91      	ldr	r3, [pc, #580]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b8d      	ldr	r3, [pc, #564]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a8c      	ldr	r2, [pc, #560]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b8a      	ldr	r3, [pc, #552]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a85      	ldr	r2, [pc, #532]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b83      	ldr	r3, [pc, #524]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b7f      	ldr	r3, [pc, #508]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a7e      	ldr	r2, [pc, #504]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b7c      	ldr	r3, [pc, #496]	; (8000bf4 <MX_GPIO_Init+0x2a4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	4879      	ldr	r0, [pc, #484]	; (8000bf8 <MX_GPIO_Init+0x2a8>)
 8000a14:	f000 ffde 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4877      	ldr	r0, [pc, #476]	; (8000bfc <MX_GPIO_Init+0x2ac>)
 8000a1e:	f000 ffd9 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a28:	4875      	ldr	r0, [pc, #468]	; (8000c00 <MX_GPIO_Init+0x2b0>)
 8000a2a:	f000 ffd3 	bl	80019d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	486d      	ldr	r0, [pc, #436]	; (8000bf8 <MX_GPIO_Init+0x2a8>)
 8000a42:	f000 fe43 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a46:	2308      	movs	r3, #8
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4866      	ldr	r0, [pc, #408]	; (8000bf8 <MX_GPIO_Init+0x2a8>)
 8000a5e:	f000 fe35 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000a62:	2332      	movs	r3, #50	; 0x32
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4860      	ldr	r0, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x2a8>)
 8000a78:	f000 fe28 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	485a      	ldr	r0, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x2ac>)
 8000a94:	f000 fe1a 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4852      	ldr	r0, [pc, #328]	; (8000bfc <MX_GPIO_Init+0x2ac>)
 8000ab4:	f000 fe0a 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	484d      	ldr	r0, [pc, #308]	; (8000c04 <MX_GPIO_Init+0x2b4>)
 8000ace:	f000 fdfd 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4845      	ldr	r0, [pc, #276]	; (8000c04 <MX_GPIO_Init+0x2b4>)
 8000aee:	f000 fded 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000af2:	23e0      	movs	r3, #224	; 0xe0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b02:	2305      	movs	r3, #5
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	483d      	ldr	r0, [pc, #244]	; (8000c04 <MX_GPIO_Init+0x2b4>)
 8000b0e:	f000 fddd 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b24:	2305      	movs	r3, #5
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4836      	ldr	r0, [pc, #216]	; (8000c08 <MX_GPIO_Init+0x2b8>)
 8000b30:	f000 fdcc 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b34:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b38:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	482c      	ldr	r0, [pc, #176]	; (8000c00 <MX_GPIO_Init+0x2b0>)
 8000b4e:	f000 fdbd 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b52:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b64:	2306      	movs	r3, #6
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x2ac>)
 8000b70:	f000 fdac 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	481e      	ldr	r0, [pc, #120]	; (8000c04 <MX_GPIO_Init+0x2b4>)
 8000b8a:	f000 fd9f 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_GPIO_Init+0x2b4>)
 8000bac:	f000 fd8e 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <MX_GPIO_Init+0x2b0>)
 8000bc4:	f000 fd82 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bc8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bce:	2312      	movs	r3, #18
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_GPIO_Init+0x2b8>)
 8000be6:	f000 fd71 	bl	80016cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40020c00 	.word	0x40020c00
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f000 fa1c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <HAL_UART_MspInit+0xc0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d14a      	bne.n	8000d20 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <HAL_UART_MspInit+0xc8>)
 8000cfc:	f000 fce6 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d10:	2307      	movs	r3, #7
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000d1c:	f000 fcd6 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020400 	.word	0x40020400

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f890 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd7 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f001 ff17 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fd0f 	bl	8000804 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df4:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 8000df8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dfc:	20000098 	.word	0x20000098

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f931 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff feee 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f93b 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f911 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000074 	.word	0x20000074

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000074 	.word	0x20000074

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5c 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_FLASH_Program+0xa0>)
 8001110:	7e1b      	ldrb	r3, [r3, #24]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_FLASH_Program+0x1e>
 8001116:	2302      	movs	r3, #2
 8001118:	e03b      	b.n	8001192 <HAL_FLASH_Program+0x96>
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_FLASH_Program+0xa0>)
 800111c:	2201      	movs	r2, #1
 800111e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001120:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001124:	f000 f870 	bl	8001208 <FLASH_WaitForLastOperation>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d12b      	bne.n	800118a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001138:	783b      	ldrb	r3, [r7, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	68b8      	ldr	r0, [r7, #8]
 800113e:	f000 f91b 	bl	8001378 <FLASH_Program_Byte>
 8001142:	e016      	b.n	8001172 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d105      	bne.n	8001156 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800114a:	883b      	ldrh	r3, [r7, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f000 f8ee 	bl	8001330 <FLASH_Program_HalfWord>
 8001154:	e00d      	b.n	8001172 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d105      	bne.n	8001168 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f000 f8c3 	bl	80012ec <FLASH_Program_Word>
 8001166:	e004      	b.n	8001172 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 f88b 	bl	8001288 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001172:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001176:	f000 f847 	bl	8001208 <FLASH_WaitForLastOperation>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_FLASH_Program+0xa4>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_FLASH_Program+0xa4>)
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_FLASH_Program+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001190:	7dfb      	ldrb	r3, [r7, #23]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000078 	.word	0x20000078
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_FLASH_Unlock+0x38>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da0b      	bge.n	80011ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_FLASH_Unlock+0x38>)
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_FLASH_Unlock+0x3c>)
 80011ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_FLASH_Unlock+0x38>)
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_FLASH_Unlock+0x40>)
 80011c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_FLASH_Unlock+0x38>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da01      	bge.n	80011ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40023c00 	.word	0x40023c00
 80011e0:	45670123 	.word	0x45670123
 80011e4:	cdef89ab 	.word	0xcdef89ab

080011e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_FLASH_Lock+0x1c>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_FLASH_Lock+0x1c>)
 80011f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40023c00 	.word	0x40023c00

08001208 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <FLASH_WaitForLastOperation+0x78>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800121a:	f7ff fe59 	bl	8000ed0 <HAL_GetTick>
 800121e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001220:	e010      	b.n	8001244 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d00c      	beq.n	8001244 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <FLASH_WaitForLastOperation+0x38>
 8001230:	f7ff fe4e 	bl	8000ed0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d201      	bcs.n	8001244 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e019      	b.n	8001278 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <FLASH_WaitForLastOperation+0x7c>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e8      	bne.n	8001222 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <FLASH_WaitForLastOperation+0x7c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <FLASH_WaitForLastOperation+0x7c>)
 800125e:	2201      	movs	r2, #1
 8001260:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <FLASH_WaitForLastOperation+0x7c>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800126e:	f000 f8a5 	bl	80013bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
  
}  
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000078 	.word	0x20000078
 8001284:	40023c00 	.word	0x40023c00

08001288 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 800129a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800129e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 80012a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <FLASH_Program_DoubleWord+0x60>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80012c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	000a      	movs	r2, r1
 80012d2:	2300      	movs	r3, #0
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	3104      	adds	r1, #4
 80012d8:	4613      	mov	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023c00 	.word	0x40023c00

080012ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <FLASH_Program_Word+0x40>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <FLASH_Program_Word+0x40>)
 80012fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001300:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <FLASH_Program_Word+0x40>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <FLASH_Program_Word+0x40>)
 8001308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <FLASH_Program_Word+0x40>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <FLASH_Program_Word+0x40>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023c00 	.word	0x40023c00

08001330 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 8001342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001346:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <FLASH_Program_HalfWord+0x44>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	801a      	strh	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <FLASH_Program_Byte+0x40>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <FLASH_Program_Byte+0x40>)
 800138a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800138e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <FLASH_Program_Byte+0x40>)
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <FLASH_Program_Byte+0x40>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <FLASH_Program_Byte+0x40>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <FLASH_Program_Byte+0x40>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 80013d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 80013da:	2210      	movs	r2, #16
 80013dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 80013f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 80013f8:	2220      	movs	r2, #32
 80013fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 8001412:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 8001430:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 800144e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 8001452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001456:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <FLASH_SetErrorCode+0xc8>)
 800146e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <FLASH_SetErrorCode+0xc4>)
 8001472:	2202      	movs	r2, #2
 8001474:	60da      	str	r2, [r3, #12]
  }
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023c00 	.word	0x40023c00
 8001484:	20000078 	.word	0x20000078

08001488 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 800149c:	7e1b      	ldrb	r3, [r3, #24]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_FLASHEx_Erase+0x1e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e058      	b.n	8001558 <HAL_FLASHEx_Erase+0xd0>
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b0:	f7ff feaa 	bl	8001208 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d148      	bne.n	8001550 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d115      	bne.n	80014fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f000 f844 	bl	8001568 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e4:	f7ff fe90 	bl	8001208 <FLASH_WaitForLastOperation>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6113      	str	r3, [r2, #16]
 80014f8:	e028      	b.n	800154c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e01c      	b.n	800153c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f000 f850 	bl	80015b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001514:	f7ff fe78 	bl	8001208 <FLASH_WaitForLastOperation>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 8001522:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001526:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	601a      	str	r2, [r3, #0]
          break;
 8001534:	e00a      	b.n	800154c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4413      	add	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3da      	bcc.n	8001502 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800154c:	f000 f878 	bl	8001640 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]

  return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000078 	.word	0x20000078
 8001564:	40023c00 	.word	0x40023c00

08001568 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <FLASH_MassErase+0x44>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <FLASH_MassErase+0x44>)
 800157a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <FLASH_MassErase+0x44>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <FLASH_MassErase+0x44>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <FLASH_MassErase+0x44>)
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4313      	orrs	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <FLASH_MassErase+0x44>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6113      	str	r3, [r2, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e010      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d103      	bne.n	80015da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e009      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d103      	bne.n	80015e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e002      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	490f      	ldr	r1, [pc, #60]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800160c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4313      	orrs	r3, r2
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6113      	str	r3, [r2, #16]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40023c00 	.word	0x40023c00

08001640 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164c:	2b00      	cmp	r3, #0
 800164e:	d017      	beq.n	8001680 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001656:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800166e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001672:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001696:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
  }
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e159      	b.n	800199c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8148 	bne.w	8001996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a2 	beq.w	8001996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a56      	ldr	r2, [pc, #344]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <HAL_GPIO_Init+0x2ec>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_GPIO_Init+0x2f0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x202>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <HAL_GPIO_Init+0x2f4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x1fe>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a47      	ldr	r2, [pc, #284]	; (80019c4 <HAL_GPIO_Init+0x2f8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x1fa>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a46      	ldr	r2, [pc, #280]	; (80019c8 <HAL_GPIO_Init+0x2fc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x1f6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a45      	ldr	r2, [pc, #276]	; (80019cc <HAL_GPIO_Init+0x300>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x1f2>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e008      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018be:	2307      	movs	r3, #7
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e004      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018ce:	2300      	movs	r3, #0
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	4093      	lsls	r3, r2
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e0:	4935      	ldr	r1, [pc, #212]	; (80019b8 <HAL_GPIO_Init+0x2ec>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	f67f aea2 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e267      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e242      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6c      	ldr	r2, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa06 	bl	8000ed0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fa02 	bl	8000ed0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e207      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f9f2 	bl	8000ed0 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f9ee 	bl	8000ed0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1f3      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c7      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f9a7 	bl	8000ed0 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f9a3 	bl	8000ed0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1a8      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f986 	bl	8000ed0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f982 	bl	8000ed0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e187      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f966 	bl	8000ed0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f962 	bl	8000ed0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e167      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x200>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f94f 	bl	8000ed0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f94b 	bl	8000ed0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e150      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f90b 	bl	8000ed0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f907 	bl	8000ed0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e10c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x30c>
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a5e      	ldr	r2, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f8cc 	bl	8000ed0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f8c8 	bl	8000ed0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0cb      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8b6 	bl	8000ed0 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f8b2 	bl	8000ed0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0b5      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a1 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d05c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d141      	bne.n	8001e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f886 	bl	8000ed0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f882 	bl	8000ed0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e087      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f85b 	bl	8000ed0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f857 	bl	8000ed0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e05c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x416>
 8001e3c:	e054      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f844 	bl	8000ed0 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f840 	bl	8000ed0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e045      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e038      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d028      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d121      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cc      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e067      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe ff72 	bl	8000ed0 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe ff6e 	bl	8000ed0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fed2 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08002c70 	.word	0x08002c70
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c8:	b094      	sub	sp, #80	; 0x50
 80020ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020dc:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d00d      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x40>
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	f200 80e1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x3a>
 80020f6:	e0db      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020fc:	e0db      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002102:	e0d8      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	2200      	movs	r2, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
 8002124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4621      	mov	r1, r4
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	4629      	mov	r1, r5
 8002156:	eb63 0301 	sbc.w	r3, r3, r1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002168:	4659      	mov	r1, fp
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4651      	mov	r1, sl
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	ebb2 0801 	subs.w	r8, r2, r1
 800217c:	4659      	mov	r1, fp
 800217e:	eb63 0901 	sbc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	462b      	mov	r3, r5
 80021a4:	eb49 0303 	adc.w	r3, r9, r3
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021b6:	4629      	mov	r1, r5
 80021b8:	024b      	lsls	r3, r1, #9
 80021ba:	4621      	mov	r1, r4
 80021bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c0:	4621      	mov	r1, r4
 80021c2:	024a      	lsls	r2, r1, #9
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d4:	f7fe f800 	bl	80001d8 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e0:	e058      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	4611      	mov	r1, r2
 80021ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0159      	lsls	r1, r3, #5
 800220a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220e:	0150      	lsls	r0, r2, #5
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4641      	mov	r1, r8
 8002216:	ebb2 0a01 	subs.w	sl, r2, r1
 800221a:	4649      	mov	r1, r9
 800221c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800222c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002234:	ebb2 040a 	subs.w	r4, r2, sl
 8002238:	eb63 050b 	sbc.w	r5, r3, fp
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	00eb      	lsls	r3, r5, #3
 8002246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224a:	00e2      	lsls	r2, r4, #3
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	4643      	mov	r3, r8
 8002252:	18e3      	adds	r3, r4, r3
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	464b      	mov	r3, r9
 8002258:	eb45 0303 	adc.w	r3, r5, r3
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226a:	4629      	mov	r1, r5
 800226c:	028b      	lsls	r3, r1, #10
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002274:	4621      	mov	r1, r4
 8002276:	028a      	lsls	r2, r1, #10
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	61fa      	str	r2, [r7, #28]
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	f7fd ffa6 	bl	80001d8 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3750      	adds	r7, #80	; 0x50
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	08002c80 	.word	0x08002c80

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	08002c80 	.word	0x08002c80

08002338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e03f      	b.n	80023ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fc82 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f9cb 	bl	8002718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d17c      	bne.n	80024ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_Transmit+0x2c>
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e075      	b.n	80024ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_UART_Transmit+0x3e>
 800240c:	2302      	movs	r3, #2
 800240e:	e06e      	b.n	80024ee <HAL_UART_Transmit+0x11c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002426:	f7fe fd53 	bl	8000ed0 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Transmit+0x82>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002464:	e02a      	b.n	80024bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f8e2 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e036      	b.n	80024ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3302      	adds	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e007      	b.n	80024ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cf      	bne.n	8002466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f8b2 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	; 0x28
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 808c 	bne.w	8002630 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_UART_Receive+0x2e>
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e084      	b.n	8002632 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_UART_Receive+0x40>
 8002532:	2302      	movs	r3, #2
 8002534:	e07d      	b.n	8002632 <HAL_UART_Receive+0x13c>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2222      	movs	r2, #34	; 0x22
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002552:	f7fe fcbd 	bl	8000ed0 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	d108      	bne.n	8002580 <HAL_UART_Receive+0x8a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d104      	bne.n	8002580 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e003      	b.n	8002588 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002590:	e043      	b.n	800261a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2120      	movs	r1, #32
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f84c 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e042      	b.n	8002632 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	b29a      	uxth	r2, r3
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3302      	adds	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e01f      	b.n	800260c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d4:	d007      	beq.n	80025e6 <HAL_UART_Receive+0xf0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_UART_Receive+0xfe>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e008      	b.n	8002606 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002600:	b2da      	uxtb	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1b6      	bne.n	8002592 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b090      	sub	sp, #64	; 0x40
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264a:	e050      	b.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d04c      	beq.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x30>
 800265a:	f7fe fc39 	bl	8000ed0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002666:	429a      	cmp	r2, r3
 8002668:	d241      	bcs.n	80026ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268a:	637a      	str	r2, [r7, #52]	; 0x34
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	613b      	str	r3, [r7, #16]
   return(result);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026be:	623a      	str	r2, [r7, #32]
 80026c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	69f9      	ldr	r1, [r7, #28]
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e00f      	b.n	800270e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d09f      	beq.n	800264c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3740      	adds	r7, #64	; 0x40
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b0c0      	sub	sp, #256	; 0x100
 800271e:	af00      	add	r7, sp, #0
 8002720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	68d9      	ldr	r1, [r3, #12]
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	ea40 0301 	orr.w	r3, r0, r1
 8002740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	431a      	orrs	r2, r3
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002770:	f021 010c 	bic.w	r1, r1, #12
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800277e:	430b      	orrs	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	6999      	ldr	r1, [r3, #24]
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	ea40 0301 	orr.w	r3, r0, r1
 800279e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b8f      	ldr	r3, [pc, #572]	; (80029e4 <UART_SetConfig+0x2cc>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d005      	beq.n	80027b8 <UART_SetConfig+0xa0>
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <UART_SetConfig+0x2d0>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d104      	bne.n	80027c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff fdaa 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 80027bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027c0:	e003      	b.n	80027ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027c2:	f7ff fd91 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80027c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d4:	f040 810c 	bne.w	80029f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027dc:	2200      	movs	r2, #0
 80027de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027ea:	4622      	mov	r2, r4
 80027ec:	462b      	mov	r3, r5
 80027ee:	1891      	adds	r1, r2, r2
 80027f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80027f2:	415b      	adcs	r3, r3
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027fa:	4621      	mov	r1, r4
 80027fc:	eb12 0801 	adds.w	r8, r2, r1
 8002800:	4629      	mov	r1, r5
 8002802:	eb43 0901 	adc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002828:	462b      	mov	r3, r5
 800282a:	eb49 0303 	adc.w	r3, r9, r3
 800282e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800283e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002846:	460b      	mov	r3, r1
 8002848:	18db      	adds	r3, r3, r3
 800284a:	653b      	str	r3, [r7, #80]	; 0x50
 800284c:	4613      	mov	r3, r2
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	657b      	str	r3, [r7, #84]	; 0x54
 8002854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800285c:	f7fd fcbc 	bl	80001d8 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4b61      	ldr	r3, [pc, #388]	; (80029ec <UART_SetConfig+0x2d4>)
 8002866:	fba3 2302 	umull	r2, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	011c      	lsls	r4, r3, #4
 800286e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002872:	2200      	movs	r2, #0
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800287c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	1891      	adds	r1, r2, r2
 8002886:	64b9      	str	r1, [r7, #72]	; 0x48
 8002888:	415b      	adcs	r3, r3
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800288c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002890:	4641      	mov	r1, r8
 8002892:	eb12 0a01 	adds.w	sl, r2, r1
 8002896:	4649      	mov	r1, r9
 8002898:	eb43 0b01 	adc.w	fp, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b0:	4692      	mov	sl, r2
 80028b2:	469b      	mov	fp, r3
 80028b4:	4643      	mov	r3, r8
 80028b6:	eb1a 0303 	adds.w	r3, sl, r3
 80028ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028be:	464b      	mov	r3, r9
 80028c0:	eb4b 0303 	adc.w	r3, fp, r3
 80028c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028dc:	460b      	mov	r3, r1
 80028de:	18db      	adds	r3, r3, r3
 80028e0:	643b      	str	r3, [r7, #64]	; 0x40
 80028e2:	4613      	mov	r3, r2
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028f2:	f7fd fc71 	bl	80001d8 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <UART_SetConfig+0x2d4>)
 80028fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2264      	movs	r2, #100	; 0x64
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <UART_SetConfig+0x2d4>)
 8002914:	fba3 2302 	umull	r2, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002920:	441c      	add	r4, r3
 8002922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800292c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002934:	4642      	mov	r2, r8
 8002936:	464b      	mov	r3, r9
 8002938:	1891      	adds	r1, r2, r2
 800293a:	63b9      	str	r1, [r7, #56]	; 0x38
 800293c:	415b      	adcs	r3, r3
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002944:	4641      	mov	r1, r8
 8002946:	1851      	adds	r1, r2, r1
 8002948:	6339      	str	r1, [r7, #48]	; 0x30
 800294a:	4649      	mov	r1, r9
 800294c:	414b      	adcs	r3, r1
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800295c:	4659      	mov	r1, fp
 800295e:	00cb      	lsls	r3, r1, #3
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002966:	4651      	mov	r1, sl
 8002968:	00ca      	lsls	r2, r1, #3
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	4603      	mov	r3, r0
 8002970:	4642      	mov	r2, r8
 8002972:	189b      	adds	r3, r3, r2
 8002974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002978:	464b      	mov	r3, r9
 800297a:	460a      	mov	r2, r1
 800297c:	eb42 0303 	adc.w	r3, r2, r3
 8002980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002998:	460b      	mov	r3, r1
 800299a:	18db      	adds	r3, r3, r3
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	4613      	mov	r3, r2
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029ae:	f7fd fc13 	bl	80001d8 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <UART_SetConfig+0x2d4>)
 80029b8:	fba3 1302 	umull	r1, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	2164      	movs	r1, #100	; 0x64
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3332      	adds	r3, #50	; 0x32
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <UART_SetConfig+0x2d4>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	f003 0207 	and.w	r2, r3, #7
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4422      	add	r2, r4
 80029de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029e0:	e106      	b.n	8002bf0 <UART_SetConfig+0x4d8>
 80029e2:	bf00      	nop
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a02:	4642      	mov	r2, r8
 8002a04:	464b      	mov	r3, r9
 8002a06:	1891      	adds	r1, r2, r2
 8002a08:	6239      	str	r1, [r7, #32]
 8002a0a:	415b      	adcs	r3, r3
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a12:	4641      	mov	r1, r8
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	4649      	mov	r1, r9
 8002a18:	eb43 0501 	adc.w	r5, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	00eb      	lsls	r3, r5, #3
 8002a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2a:	00e2      	lsls	r2, r4, #3
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4643      	mov	r3, r8
 8002a32:	18e3      	adds	r3, r4, r3
 8002a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a38:	464b      	mov	r3, r9
 8002a3a:	eb45 0303 	adc.w	r3, r5, r3
 8002a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a5e:	4629      	mov	r1, r5
 8002a60:	008b      	lsls	r3, r1, #2
 8002a62:	4621      	mov	r1, r4
 8002a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a68:	4621      	mov	r1, r4
 8002a6a:	008a      	lsls	r2, r1, #2
 8002a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a70:	f7fd fbb2 	bl	80001d8 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	011c      	lsls	r4, r3, #4
 8002a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a94:	4642      	mov	r2, r8
 8002a96:	464b      	mov	r3, r9
 8002a98:	1891      	adds	r1, r2, r2
 8002a9a:	61b9      	str	r1, [r7, #24]
 8002a9c:	415b      	adcs	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	1851      	adds	r1, r2, r1
 8002aa8:	6139      	str	r1, [r7, #16]
 8002aaa:	4649      	mov	r1, r9
 8002aac:	414b      	adcs	r3, r1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002abc:	4659      	mov	r1, fp
 8002abe:	00cb      	lsls	r3, r1, #3
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	00ca      	lsls	r2, r1, #3
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad8:	464b      	mov	r3, r9
 8002ada:	460a      	mov	r2, r1
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002afc:	4649      	mov	r1, r9
 8002afe:	008b      	lsls	r3, r1, #2
 8002b00:	4641      	mov	r1, r8
 8002b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b06:	4641      	mov	r1, r8
 8002b08:	008a      	lsls	r2, r1, #2
 8002b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b0e:	f7fd fb63 	bl	80001d8 <__aeabi_uldivmod>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2264      	movs	r2, #100	; 0x64
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	1acb      	subs	r3, r1, r3
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b38:	441c      	add	r4, r3
 8002b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3e:	2200      	movs	r2, #0
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
 8002b42:	677a      	str	r2, [r7, #116]	; 0x74
 8002b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b48:	4642      	mov	r2, r8
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	1891      	adds	r1, r2, r2
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	415b      	adcs	r3, r3
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b58:	4641      	mov	r1, r8
 8002b5a:	1851      	adds	r1, r2, r1
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	4649      	mov	r1, r9
 8002b60:	414b      	adcs	r3, r1
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b70:	4659      	mov	r1, fp
 8002b72:	00cb      	lsls	r3, r1, #3
 8002b74:	4651      	mov	r1, sl
 8002b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	00ca      	lsls	r2, r1, #3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	4642      	mov	r2, r8
 8002b86:	189b      	adds	r3, r3, r2
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b8a:	464b      	mov	r3, r9
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	eb42 0303 	adc.w	r3, r2, r3
 8002b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9e:	667a      	str	r2, [r7, #100]	; 0x64
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bac:	4649      	mov	r1, r9
 8002bae:	008b      	lsls	r3, r1, #2
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	008a      	lsls	r2, r1, #2
 8002bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bbe:	f7fd fb0b 	bl	80001d8 <__aeabi_uldivmod>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2164      	movs	r1, #100	; 0x64
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	3332      	adds	r3, #50	; 0x32
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <UART_SetConfig+0x4e4>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4422      	add	r2, r4
 8002bee:	609a      	str	r2, [r3, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfc:	51eb851f 	.word	0x51eb851f

08002c00 <memset>:
 8002c00:	4402      	add	r2, r0
 8002c02:	4603      	mov	r3, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4d0d      	ldr	r5, [pc, #52]	; (8002c48 <__libc_init_array+0x38>)
 8002c14:	4c0d      	ldr	r4, [pc, #52]	; (8002c4c <__libc_init_array+0x3c>)
 8002c16:	1b64      	subs	r4, r4, r5
 8002c18:	10a4      	asrs	r4, r4, #2
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	4d0b      	ldr	r5, [pc, #44]	; (8002c50 <__libc_init_array+0x40>)
 8002c22:	4c0c      	ldr	r4, [pc, #48]	; (8002c54 <__libc_init_array+0x44>)
 8002c24:	f000 f818 	bl	8002c58 <_init>
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08002c90 	.word	0x08002c90
 8002c4c:	08002c90 	.word	0x08002c90
 8002c50:	08002c90 	.word	0x08002c90
 8002c54:	08002c94 	.word	0x08002c94

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	bf00      	nop
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
